// generated by Fast Light User Interface Designer (fluid) version 2.0100

#include "Test3.h"
// Code for This example is completely written using fluid2.
#include <stdlib.h>

static void cb_(fltk::Window*, void*) {
  exit(0);
}

fltk::RegionHolder *region=(fltk::RegionHolder *)0;

fltk::InputBrowser *inb=(fltk::InputBrowser *)0;

#include <fltk/run.h>

int main (int argc, char **argv) {

  fltk::Window* w;
  /*
  Leave alignment value in constructor is not recommended (see documentation).
  Edit the code to pass alignment value in constructor.
  */
  fltk::Global::save_status(false);
   {fltk::Window* o = new fltk::Window(650, 475);
    w = o;
    o->callback((fltk::Callback*)cb_);
    o->begin();
     {fltk::RegionHolder* o = region = new fltk::RegionHolder(0, 0, 650, 475);
      o->begin();
       {fltk::BarHolder* o = new fltk::BarHolder(0, 0, 650, 80);
        o->begin();
         {fltk::ToolBar* o = new fltk::ToolBar(0, 0, 175, 40);
          o->begin();
          new fltk::HighlightButton(0, 0, 40, 40, "one");
          new fltk::HighlightButton(40, 0, 40, 40, "two");
          new fltk::HighlightButton(80, 0, 40, 40, "three");
          new fltk::ToolDivider();
          new fltk::HighlightButton(135, 0, 40, 40, "four");
          o->end();
        }
         {fltk::ToolBar* o = new fltk::ToolBar(225, 40, 235, 40);
          o->begin();
          new fltk::HighlightButton(0, 0, 40, 40, "Cut");
          new fltk::HighlightButton(40, 0, 40, 40, "Copy");
          new fltk::HighlightButton(80, 0, 40, 40, "Paste");
          new fltk::ToolDivider();
           {fltk::InputBrowser* o = inb = new fltk::InputBrowser(140, 10, 90, 22);
          }
          o->end();
          o->child_info(fltk::ToolBar::FIXED_HEIGHT 
               | fltk::ToolBar::FIXED_WIDTH, 5, 10, inb);
          o->min_sizes(10, 40, 100, 10);
        }
        o->end();
      }
       {fltk::BarHolder* o = new fltk::BarHolder(0, 80, 15, 380);
        o->set_vertical();
      }
       {fltk::BarHolder* o = new fltk::BarHolder(635, 80, 15, 380);
        o->set_vertical();
      }
       {fltk::BarHolder* o = new fltk::BarHolder(0, 460, 650, 15);
      }
       {fltk::DockHolder* o = new fltk::DockHolder(15, 80, 620, 380);
        o->begin();
        new fltk::TextEditor(0, 0, 620, 380);
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  region->initiate();
  w->show(argc, argv);
  return  fltk::run();
}
